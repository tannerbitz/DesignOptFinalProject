classdef MPC < handle
    properties
        f         % (6xN)
        A         % (6x6xN)
        B         % (6x2xN)
        Gamma_el  % (3x3xN)
        Gamma_ec  % (3x3xN)
        C_el      % (3xN)
        C_ec      % (3xN)
        
        States    % (6xN) [X, Y, varphi, vx, vy, omegaB]'
        linStates    % linearzation states (6xN) [X, Y, varphi, vx, vy, omegaB]'
        thetaA    % (1xN) [thetaA]
        U         % (2xN) [Flong, delta]'
        
        Ts
        N         % Horizon length
        
    end
    
    methods
        function obj = MPC(~,Ts)
            addpath ./TaylorEqs/;
            
            obj.Ts = Ts;
        end
        
        function [] = setStates(obj,States, uN)
            N1 = obj.N;
            % set initial states to current sim states
            obj.States(:,1) = States;
            
            % shift states by one sampling period
            for i = 2:N1-1
                obj.States(:,i) = obj.States(:,i+1);
            end
            
            % compute last state
            obj.States(:,N1) = obj.States(:,N1) + obj.Ts*obj.f(:,N1);
            
            %save these states as linearization states
            obj.linStates = obj.States;
            
        end
        
        function [] = linearize(obj, car, ax, ay, bx, by, cx, cy, dx, dy)
            
            Fz_f = car.mass*9.81*car.dm;
            Fz_r = car.mass*9.81*(1-car.dm);
            
            N1 = obj.N;
            for i = 1:N1
                %%%   INPUT VECTOR for Gamma_ec, Gamma_el, Cec, Cel %%%%%
                %    (X,Y,ax,ay,bx,by,cx,cy,dx,dy,theta)
                X_in = obj.States(1, i);
                Y_in = obj.States(2, i);
                thetaA_in = obj.theta(i);
                
                inputs = {X_in, Y_in, ax, ay, bx, by, cx, cy, dx, dy, thetaA_in};
                obj.GammaEc(:, :, i) = GammaEc(inputs);
                obj.GammaEl(:, :, i) = GammaEl(inputs);
                obj.Cec(:, i) = Cec(inputs);
                obj.Cel(:, i) = Cel(inputs);
                
                alphaf = atan2(obj.States(5, i) + car.lr*obj.States(6, i), obj.States(4, i)) - obj.U(2, i);
                alphar = atan2(obj.States(5, i) - car.lf*obj.States(6, i), obj.States(4, i));
                
                R = car.mu_k/car.mu_s;
                alphaFMax = atan2(3*car.mu_s*Fz_f, car.C);
                alphaRMax = atan2(3*car.mu_s*Fz_r, car.C);
                
                %%%   INPUT VECTOR for f, A, B %%%%%
                %    C,Flong,Fz_f,Fz_r,Iz,R,delta,lf,lr,m,mu,omegaB,varphi,vx,vy
                C_in = car.C;
                Flong_in = obj.U(1, i);
                Fz_f_in = Fz_f;
                Fz_r_in = Fz_r;
                Iz_in = car.Iz;
                R_in = R;
                delta_in = obj.U(2, i);
                lf_in = car.lf;
                lr_in = car.lr;
                m_in = car.mass;
                mu_in = car.mu_s;
                omegaB_in = obj.States(6, i);
                varphi_in = obj.States(3, i);
                vx_in = obj.States(4, i);
                vy_in = obj.States(5, i);
                
                inputs = {C_in, Flong_in, Fz_f_in, Fz_r_in, Iz_in, R_in, delta_in, lf_in, lr_in, m_in, mu_in, omegaB_in, varphi_in, vx_in, vy_in};
                
                if (abs(alphaf) < alphaFMax  && abs(alphar) < alphaRMax) % front grip, rear grip
                    obj.fn(:,i) = statesdot_fgrg(inputs);         
                    obj.A(:,:,i) = A_fgrg(inputs);   
                    obj.B(:,:,i) = B_fgrg(inputs);      
                    
                elseif (abs(alphaf) >= alphaFMax && abs(alphar) < alphaRMax) % front slip, rear grip
                    obj.fn(:,i) = statesdot_fsrg(intputs);               
                    obj.A(:,:,i) = A_fsrg(intputs);
                    obj.B(:,:,i) = B_fsrg(intputs);
                    
                elseif (abs(alphaf) < alphaFMax && abs(alphar) >= alphaRMax) % front grip, rear slip
                    obj.fn(:,i) = statesdot_fgrs(intputs);            
                    obj.A(:,:,i) = A_fgrs(intputs);
                    obj.B(:,:,i) = B_fgrs(intputs);
                    
                elseif (abs(alphaf) >= alphaFMax && abs(alphar) >= alphaRMax) % front slip, rear slip
                    obj.fn(:,i) = statesdot_fsrs(intputs);
                    obj.A(:,:,i) = A_fsrs(intputs);
                    obj.B(:,:,i) = B_fsrs(intputs);
                end
            end
        end
        
        function cost = cost(obj,inVec)
           % weights 
           qc = 1;
           ql = 1;
           gamma = 1;
           ru = 1;
           rv = 1;
            
           % inVec = [theta, F_long_1, delta_1, v_1, F_long_2, delta_2, v_2, ...
           lenInVec = length(inVec);
           theta = inVec(1);
           F_long = inVec(2:4:lenInVec-2);
           delta = inVec(3:4:lenInVec-1);
           v = inVec(4:4:lenInVec);
           
           cost = gamma*obj.Ts*v(1);
           
           thetaTemp = zeros(1,obj.N);
           StatesTemp = zeros(6,obj.N);
           thetaTemp(1) = theta;
           StatesTemp(1) = obj.States(1);
           
           for k = 2:obj.N 
              thetaTemp(k) = thetaTemp(k-1) + v(k)*obj.Ts;
              StatesTemp(:,k) = StatesTemp(:,k-1)  ...
                  + obj.Ts*(obj.A(:,:,k-1)*(StatesTemp(:,k-1)-obj.States(:,k-1)) ...
                          + obj.B(:,:,k-1)*([F_long(k-1),delta(k-1)] - obj.U(:,k-1)) + obj.f(:,k-1));
                      
              cost = cost + [States
              
               
               
           end
           
           
            
            
        end
        
        
        
        
    end
    
    
end
